# -*- coding: utf-8 -*-
"""Dynamic Insurance Premium Calculator

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LkCAjlMFODrLJIwHVDIEJSt2saQEO6i6
"""

import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestRegressor
from datetime import datetime

class AdvancedInsuranceCalculator:
    def __init__(self):
        self.mortality_tables = {
            'male': {20: 0.001, 30: 0.002, 40: 0.005, 50: 0.015, 60: 0.04},
            'female': {20: 0.0008, 30: 0.0015, 40: 0.003, 50: 0.01, 60: 0.025}
        }

        self.occupation_risk_map = {
            'low': ['teacher', 'accountant', 'librarian'],
            'medium': ['driver', 'nurse', 'salesperson'],
            'high': ['construction', 'miner', 'firefighter']
        }

        self.health_conditions = {
            'none': 0,
            'minor': 1,
            'major': 2
        }

        self.policy_types = {
            0: 'Term Life',
            1: 'Endowment',
            2: 'Whole Life'
        }

        self.model = RandomForestRegressor(n_estimators=150, random_state=42)
        self.initialize_data()
        self.train_model()

    def initialize_data(self):
        np.random.seed(42)
        n = 5000

        self.df = pd.DataFrame({
            "Age": np.random.randint(18, 70, size=n),
            "Gender": np.random.choice([0, 1], size=n),
            "Smoking": np.random.choice([0, 1], size=n, p=[0.7, 0.3]),
            "Alcohol": np.random.choice([0, 1], size=n, p=[0.6, 0.4]),
            "Health": np.random.choice([0, 1, 2], size=n, p=[0.6, 0.3, 0.1]),
            "FamilyHistory": np.random.choice([0, 1], size=n),
            "OccupationRisk": np.random.choice([0, 1, 2], size=n, p=[0.5, 0.3, 0.2]),
            "Income": np.random.exponential(scale=50000, size=n).astype(int) + 20000,
            "PolicyType": np.random.choice([0, 1, 2], size=n, p=[0.5, 0.3, 0.2]),
            "Coverage": (np.random.exponential(scale=1000000, size=n) + 100000).astype(int),
            "PolicyTerm": np.random.randint(1, 30, size=n),
            "ZoneRisk": np.random.choice([0, 1, 2], size=n),
            "DrivingScore": np.random.randint(60, 100, size=n)
        })

        self.df["MortalityRisk"] = self.df.apply(
            lambda x: self.mortality_tables['female' if x['Gender'] else 'male'].get(min(x['Age'], 60), 0.05), axis=1
        )

        base_rate = self.df["Coverage"] * 0.01 / self.df["PolicyTerm"]

        risk_score = (
            self.df["MortalityRisk"] * 100 +
            self.df["Smoking"] * 1.8 +
            self.df["Alcohol"] * 1.3 +
            self.df["Health"] * 2.2 +
            self.df["FamilyHistory"] * 1.5 +
            self.df["OccupationRisk"] * 1.7 +
            (2 - self.df["PolicyType"]) * 1.2 +
            self.df["ZoneRisk"] * 1.3 +
            ((100 - self.df["DrivingScore"]) / 20)
        )

        self.df["Premium"] = (base_rate * (1 + (risk_score / 100)) * 1.11)  # 11% profit

    def train_model(self):
        X = self.df.drop("Premium", axis=1)
        y = self.df["Premium"]
        self.model.fit(X, y)

    def get_yes_no(self, prompt):
        while True:
            val = input(f"{prompt} (yes/no): ").strip().lower()
            if val in ['yes', 'no']:
                return 1 if val == 'yes' else 0
            print("Invalid input. Please enter yes or no.")

    def get_health_condition(self):
        while True:
            val = input("Health Condition (None/Minor/Major): ").strip().lower()
            if val in self.health_conditions:
                return self.health_conditions[val]
            print("Invalid. Choose from None, Minor, Major.")

    def get_occupation_risk(self, occupation):
        occupation = occupation.lower()
        for level, jobs in self.occupation_risk_map.items():
            if any(job in occupation for job in jobs):
                return {'low': 0, 'medium': 1, 'high': 2}[level]
        return 1  # default to medium

    def get_zone_risk(self):
        print("Zone Risk: 0=Safe, 1=Moderate, 2=Unsafe")
        try:
            return int(input("Zone Risk [Enter for 1=Moderate]: ") or "1")
        except:
            return 1

    def get_policy_type(self):
        print("Policy Types: 0=Term, 1=Endowment, 2=Whole Life")
        while True:
            try:
                val = int(input("Enter Policy Type (0-2): "))
                if val in [0, 1, 2]:
                    return val
            except:
                pass
            print("Invalid input.")

    def get_optional_input(self, prompt, default, typ=int):
        val = input(f"{prompt} [Enter for default={default}]: ").strip()
        return default if val == '' else typ(val)

    def segment_customer(self, income, occupation):
        occupation = occupation.lower()
        if income > 100000 and any(w in occupation for w in ['doctor', 'engineer', 'ca']):
            return 'Premium'
        elif income < 30000 or any(w in occupation for w in ['student', 'unemployed']):
            return 'Budget'
        return 'Standard'

    def get_market_adjustment(self):
        m = datetime.now().month
        return {
            'medical_inflation': 1.0 + (m * 0.002),
            'disaster_risk': 1.05 if m in [6, 7, 8] else 1.0,
            'competition_factor': 0.98
        }

    def check_regulation(self, premium, coverage):
        max_allowed = (coverage * 0.02) * 1.3
        return premium <= max_allowed

    def get_user_input(self):
        print("\n=== Advanced Insurance Calculator ===")

        data = {
            "Age": self.get_optional_input("*Age (years)", 35),
            "Gender": 1 if input("*Gender (M/F) [Enter for M]: ").strip().upper() == 'F' else 0,
            "Smoking": self.get_yes_no("*Do you smoke?"),
            "Alcohol": self.get_yes_no("*Do you consume alcohol?"),
            "Health": self.get_health_condition(),
            "FamilyHistory": self.get_yes_no("*Family history of serious illness?"),
            "OccupationRisk": self.get_occupation_risk(input("*Your occupation: ")),
            "Income": self.get_optional_input("*Monthly Income (₹)", 50000),
            "PolicyType": self.get_policy_type(),
            "Coverage": self.get_optional_input("*Coverage Amount (₹)", 1000000),
            "PolicyTerm": self.get_optional_input("*Policy Term (years)", 10),
            "ZoneRisk": self.get_zone_risk(),
            "DrivingScore": self.get_optional_input("Driving Score (0-100)", 85)
        }

        age = min(data["Age"], 60)
        gender_key = 'female' if data["Gender"] == 1 else 'male'
        data["MortalityRisk"] = self.mortality_tables[gender_key].get(age, 0.05)

        return pd.DataFrame([data]), data["Income"], input("Enter your occupation again for segmentation: ")

    def calculate_premium(self, df, income, occupation):
        base = self.model.predict(df)[0]
        market = self.get_market_adjustment()
        adjusted = base * market['medical_inflation'] * market['disaster_risk'] * market['competition_factor']
        segment = self.segment_customer(income, occupation)

        if segment == 'Premium':
            final = adjusted * 0.95
        elif segment == 'Budget':
            final = adjusted * 1.05
        else:
            final = adjusted

        return base, adjusted, final, market, segment

    def generate_report(self, df, base, adjusted, final, market, segment):
        data = df.iloc[0]
        print("\n--- INSURANCE PREMIUM REPORT ---")
        print(f"Policy Type: {self.policy_types.get(data['PolicyType'])}")
        print(f"Coverage: ₹{data['Coverage']:,}")
        print(f"Term: {data['PolicyTerm']} years")

        print(f"\nBase Premium: ₹{base:,.2f}")
        print("Market Adjustments:")
        for k, v in market.items():
            print(f"  • {k.replace('_', ' ').title()}: {v:.2f}x")

        print(f"Customer Type: {segment}")
        print(f"\nFinal Monthly Premium: ₹{final:,.2f}")
        print(f"Annual Premium: ₹{final * 12:,.2f}")

        if not self.check_regulation(final, data["Coverage"]):
            print("⚠️ Warning: Exceeds regulatory premium limit.")

    def run(self):
        df, income, occ = self.get_user_input()
        base, adjusted, final, market, segment = self.calculate_premium(df, income, occ)
        self.generate_report(df, base, adjusted, final, market, segment)


# Run the calculator
if __name__ == "__main__":
    calculator = AdvancedInsuranceCalculator()
    calculator.run()

